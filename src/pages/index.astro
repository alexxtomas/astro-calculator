---
import Button from '../components/Button.astro';
import Layout from '../layouts/Layout.astro'
import { CALCULATOR_ITEMS } from '../utils/constants';

const color1 = 'bg-stone-700'
const color2 = 'bg-stone-500'
const color3 = 'bg-white/95'
const lastElements = [3, 7, 11, 15, 19]
---

<Layout title="Astro - Windows Calculator">
	<main class="bg-stone-900 flex flex-col rounded-md">
		<section class="flex flex-col gap-4">
		<div class="flex w-full justify-end bg-inherit text-white rounded-md">
			<button class="flex items-center justify-center hover:bg-red-700 hover:text-white  px-2 rounded-tr-md">
				×
			</button>
			
		</div>
		<input type="number" id="calculator" class="w-ful bg-inherit text-xl  text-end text-white outline-none pr-1" value={0} />
	</section>
	<section class="bg-red grid grid-cols-4  gap-[1px] p-[2px]">
		{
			CALCULATOR_ITEMS.map((el, idx) => {
				const isLastIdx = idx === CALCULATOR_ITEMS.length - 1
				const isFirstRow = idx === 0 || idx === 1 || idx === 2

				const isLastElement = lastElements.includes(idx)

				const bgColor = isLastIdx ? color3 : isFirstRow || isLastElement ? color1 : color2

				const color = isLastIdx ? 'text-black' : 'text-white'

				const hoverColor =bgColor === color1 ? 'hover:bg-stone-500' : bgColor === color3 ? 'hover:bg-white/70' : 'hover:bg-stone-700'



				return <Button bgColor={bgColor} content={el} color={color} hoverColor={`${hoverColor}`} />
			})
		}

	</section>
	</main>
</Layout>

<style>
	/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type=number] {
  -moz-appearance: textfield;
}
</style>

<script>
	let operation = null
	const buttons = document.querySelectorAll('.calculator-button')
	const input = document.querySelector('#calculator') as HTMLInputElement

	buttons.forEach(button => {
		button.addEventListener('click' , (e: any) => {
			const _value = e.target.textContent.trim()

			if(_value === 'C' || _value === 'CE') {
				input.value = '0'
				return
			}


			if(_value === '⌫') {
				if(input.value.length === 1) {
					input.value = '0'
					return
				}
				const newValue = input.value.slice(0, -1)
				input.value = newValue
				return
			}

			if(_value === '÷') {
			  operation = '/'
				return
			}

			console.log('_value')



      if(
			input.value === '0'
			) {
				input.value = ''
			}
			const newValue = input.value.concat(_value)

			input.value = newValue
			


		})
	})
</script>

